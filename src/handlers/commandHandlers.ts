import { Markup } from "telegraf";

import { logger, userSettingsService, contextService } from "../services";
import { BotContext, ResponseStyle } from "../types";
import { safeReply } from "../utils";

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
 * –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—ä—è—Å–Ω—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
 */
export const startHandler = async (ctx: BotContext): Promise<void> => {
  const userName = ctx.from?.first_name || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  const userId = ctx.from?.id;
  const username = ctx.from?.username;

  // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start
  if (userId) {
    logger.logUserActivity(userId, username, "start_command", {
      firstName: ctx.from?.first_name,
      chatType: ctx.chat?.type,
    });
  }

  const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${userName}! üëã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Gemini API.

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞.`;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
  await safeReply(ctx, welcomeMessage, {
    parse_mode: "Markdown",
  });
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞
 */
export const helpHandler = async (ctx: BotContext): Promise<void> => {
  const userId = ctx.from?.id;
  const username = ctx.from?.username;

  // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /help
  if (userId) {
    logger.logUserActivity(userId, username, "help_command", {
      chatType: ctx.chat?.type,
    });
  }

  const helpMessage = `ü§ñ **–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:**

üìù **–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
/style - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤
/styles - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏
/setstyle [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤
/context - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–∏–∞–ª–æ–≥–∞
/clearcontext - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π

üé® **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:**
‚Ä¢ **10 —Å—Ç–∏–ª–µ–π –æ—Ç–≤–µ—Ç–æ–≤** - –∫—Ä–∞—Ç–∫–∏–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø–æ–¥—Ä–æ–±–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∏ –¥—Ä.
‚Ä¢ **–£–¥–æ–±–Ω—ã–π –≤—ã–±–æ—Ä** - –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–µ /styles –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏** - –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π —Å—Ç–∏–ª—å
‚Ä¢ **–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ** - –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—Ç—Å—è

üß† **–ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞:**
‚Ä¢ **–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π** - –∑–∞–ø–æ–º–∏–Ω–∞—é –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–≤—è–∑–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
‚Ä¢ **–£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
‚Ä¢ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏** - –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
‚Ä¢ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç** - —É –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è

üí¨ **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:**
‚Ä¢ **–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è** - –æ—Ç–≤–µ—á–∞—é —Å –ø–æ–º–æ—â—å—é –ò–ò –≤ –≤–∞—à–µ–º —Å—Ç–∏–ª–µ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
‚Ä¢ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è** - –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –æ–ø–∏—Å—ã–≤–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
‚Ä¢ **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è** - —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∏ –æ—Ç–≤–µ—á–∞—é
‚Ä¢ **–ê—É–¥–∏–æ—Ñ–∞–π–ª—ã** - –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (—Ä–µ—á—å, –º—É–∑—ã–∫–∞, –ø–æ–¥–∫–∞—Å—Ç—ã)

üñºÔ∏è **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ –æ–±—ä–µ–∫—Ç–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, WEBP, HEIC, HEIF

üéµ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ:**
‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ - –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
‚Ä¢ –î–ª–∏–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã - –æ–ø—Ä–µ–¥–µ–ª—è—é —Ç–∏–ø –∏ –æ–ø–∏—Å—ã–≤–∞—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ñ–æ—Ä–º–∞—Ç—ã: MP3, WAV, M4A, AAC, OGG, FLAC

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ –≤ –≤–∞—à–µ–º —Å—Ç–∏–ª–µ! üöÄ`;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
  await safeReply(ctx, helpMessage, {
    parse_mode: "Markdown",
  });
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
 * –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
 */
export const unknownCommandHandler = (ctx: BotContext): void => {
  const userId = ctx.from?.id;
  const username = ctx.from?.username;
  const command =
    ctx.message && "text" in ctx.message ? ctx.message.text : "unknown";

  // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
  if (userId) {
    logger.logUserActivity(userId, username, "unknown_command", {
      command,
      chatType: ctx.chat?.type,
    });
  }

  logger.warn("–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", {
    userId,
    command,
  });

  const message = `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ /style - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ /styles - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å—Ç–∏–ª–∏ –∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ /setstyle [—Å—Ç–∏–ª—å] - –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ /context - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–∏–∞–ª–æ–≥–∞
‚Ä¢ /clearcontext - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º! üòä`;

  void safeReply(ctx, message, { parse_mode: "Markdown" });
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /style
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å
 */
export const styleHandler = async (ctx: BotContext): Promise<void> => {
  const userId = ctx.from?.id;
  const username = ctx.from?.username;

  if (!userId) {
    await safeReply(ctx, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    return;
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /style
  logger.logUserActivity(userId, username, "style_command", {
    chatType: ctx.chat?.type,
  });

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userSettings = userSettingsService.getUserSettings(userId, username);
    const currentStyle = userSettingsService.getStyleDescription(
      userSettings.responseStyle
    );

    const message = `üé® **–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤:**

${currentStyle?.emoji} **${currentStyle?.name}**
${currentStyle?.description}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /styles —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.`;

    await safeReply(ctx, message, { parse_mode: "Markdown" });
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", error);
    await safeReply(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.");
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /styles
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
 */
export const stylesHandler = async (ctx: BotContext): Promise<void> => {
  const userId = ctx.from?.id;
  const username = ctx.from?.username;

  if (!userId) {
    await safeReply(ctx, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    return;
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /styles
  logger.logUserActivity(userId, username, "styles_command", {
    chatType: ctx.chat?.type,
  });

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏
    const allStyles = userSettingsService.getAllStyles();
    const userSettings = userSettingsService.getUserSettings(userId, username);

    // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∏–ª–µ–π
    let message = "üé® **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤:**\n\n";

    allStyles.forEach((style) => {
      const isActive = style.key === userSettings.responseStyle;
      const activeMarker = isActive ? "‚úÖ " : "";
      message += `${activeMarker}${style.emoji} **${style.name}**\n`;
      message += `${style.description}\n`;
      message += `–ö–æ–º–∞–Ω–¥–∞: \`/setstyle ${style.key}\`\n\n`;
    });

    message += `–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å: **${userSettings.responseStyle}**\n\n`;
    message += "üí° **–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å:**\n";
    message += "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n";
    message += "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ";

    // –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∏–ª—è
    const keyboard = allStyles.map((style) => {
      const isActive = style.key === userSettings.responseStyle;
      const buttonText = isActive
        ? `‚úÖ ${style.emoji} ${style.name}`
        : `${style.emoji} ${style.name}`;

      return [Markup.button.callback(buttonText, `setstyle_${style.key}`)];
    });

    await ctx.reply(message, {
      parse_mode: "Markdown",
      reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
    });
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∏–ª–µ–π", error);
    await safeReply(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∏–ª–µ–π.");
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setstyle [style]
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤
 */
export const setStyleHandler = async (ctx: BotContext): Promise<void> => {
  const userId = ctx.from?.id;
  const username = ctx.from?.username;

  if (!userId) {
    await safeReply(ctx, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã
  const messageText =
    ctx.message && "text" in ctx.message ? ctx.message.text : "";
  const args = messageText.split(" ");

  if (args.length < 2) {
    await safeReply(
      ctx,
      "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä: `/setstyle friendly`\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /styles —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏.",
      { parse_mode: "Markdown" }
    );
    return;
  }

  const newStyleKey = args[1].toLowerCase();

  // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–º–µ–Ω—ã —Å—Ç–∏–ª—è
  logger.logUserActivity(userId, username, "setstyle_command", {
    requestedStyle: newStyleKey,
    chatType: ctx.chat?.type,
  });

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∏–ª—å –≤–∞–ª–∏–¥–Ω—ã–π
    if (!userSettingsService.isValidStyle(newStyleKey)) {
      await safeReply(
        ctx,
        `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å "${newStyleKey}". –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /styles —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏.`
      );
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedSettings = userSettingsService.updateUserStyle(
      userId,
      newStyleKey as ResponseStyle,
      username
    );

    const styleDescription = userSettingsService.getStyleDescription(
      updatedSettings.responseStyle
    );

    const message = `‚úÖ **–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω!**

${styleDescription?.emoji} **${styleDescription?.name}**
${styleDescription?.description}

–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!`;

    await safeReply(ctx, message, { parse_mode: "Markdown" });
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∏–ª—è", error);
    await safeReply(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª—è.");
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
 */
export const styleCallbackHandler = async (ctx: BotContext): Promise<void> => {
  const callbackData =
    ctx.callbackQuery && "data" in ctx.callbackQuery
      ? ctx.callbackQuery.data
      : "";
  const userId = ctx.from?.id;
  const username = ctx.from?.username;

  if (!userId) {
    await ctx.answerCbQuery("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ callback –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∏–ª—è
  if (!callbackData.startsWith("setstyle_")) {
    await ctx.answerCbQuery("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
    return;
  }

  const newStyleKey = callbackData.replace("setstyle_", "");

  // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–º–µ–Ω—ã —Å—Ç–∏–ª—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
  logger.logUserActivity(userId, username, "setstyle_callback", {
    requestedStyle: newStyleKey,
    chatType: ctx.chat?.type,
  });

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∏–ª—å –≤–∞–ª–∏–¥–Ω—ã–π
    if (!userSettingsService.isValidStyle(newStyleKey)) {
      await ctx.answerCbQuery(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å "${newStyleKey}"`);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedSettings = userSettingsService.updateUserStyle(
      userId,
      newStyleKey as ResponseStyle,
      username
    );

    const styleDescription = userSettingsService.getStyleDescription(
      updatedSettings.responseStyle
    );

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await ctx.answerCbQuery(`‚úÖ –°—Ç–∏–ª—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${styleDescription?.name}"`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    const allStyles = userSettingsService.getAllStyles();

    let message = "üé® **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤:**\n\n";

    allStyles.forEach((style) => {
      const isActive = style.key === updatedSettings.responseStyle;
      const activeMarker = isActive ? "‚úÖ " : "";
      message += `${activeMarker}${style.emoji} **${style.name}**\n`;
      message += `${style.description}\n`;
      message += `–ö–æ–º–∞–Ω–¥–∞: \`/setstyle ${style.key}\`\n\n`;
    });

    message += `–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å: **${updatedSettings.responseStyle}**\n\n`;
    message += "üí° **–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å:**\n";
    message += "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n";
    message += "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ";

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    const keyboard = allStyles.map((style) => {
      const isActive = style.key === updatedSettings.responseStyle;
      const buttonText = isActive
        ? `‚úÖ ${style.emoji} ${style.name}`
        : `${style.emoji} ${style.name}`;

      return [Markup.button.callback(buttonText, `setstyle_${style.key}`)];
    });

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    const confirmMessage = `‚úÖ **–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω!**

${styleDescription?.emoji} **${styleDescription?.name}**
${styleDescription?.description}

–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!`;

    await safeReply(ctx, confirmMessage, { parse_mode: "Markdown" });
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∏–ª—è —á–µ—Ä–µ–∑ callback", error);
    await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª—è.");
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /context
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const contextHandler = async (ctx: BotContext): Promise<void> => {
  const userId = ctx.from?.id;
  const username = ctx.from?.username;

  if (!userId) {
    await safeReply(ctx, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    return;
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /context
  logger.logUserActivity(userId, username, "context_command", {
    chatType: ctx.chat?.type,
  });

  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userSettings = userSettingsService.getUserSettings(userId, username);
    const contextSettings = userSettings.contextSettings;

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const stats = contextService.getUserContextStats(userId);

    const statusEmoji = contextSettings.enabled ? "‚úÖ" : "‚ùå";
    const autoCleanupEmoji = contextSettings.autoCleanup ? "üîÑ" : "‚è∏Ô∏è";

    const message = `üß† **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞**

${statusEmoji} **–°—Ç–∞—Ç—É—Å**: ${contextSettings.enabled ? "–í–∫–ª—é—á–µ–Ω" : "–í—ã–∫–ª—é—á–µ–Ω"}
üìä **–°–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏**: ${stats.messageCount}
üî¢ **–ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤**: ${stats.estimatedTokens}

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**:
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π: ${contextSettings.maxMessages}
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: ${contextSettings.maxTokens}
‚Ä¢ ${autoCleanupEmoji} –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: ${
      contextSettings.autoCleanup ? "–í–∫–ª—é—á–µ–Ω–∞" : "–í—ã–∫–ª—é—á–µ–Ω–∞"
    }

${
  stats.oldestMessage
    ? `üìÖ **–°–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**: ${new Date(
        stats.oldestMessage
      ).toLocaleString("ru-RU")}`
    : ""
}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clearcontext —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞.`;

    await safeReply(ctx, message, { parse_mode: "Markdown" });
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ", error);
    await safeReply(
      ctx,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ."
    );
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clearcontext
 * –û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const clearContextHandler = async (ctx: BotContext): Promise<void> => {
  const userId = ctx.from?.id;
  const username = ctx.from?.username;

  if (!userId) {
    await safeReply(ctx, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    return;
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /clearcontext
  logger.logUserActivity(userId, username, "clear_context_command", {
    chatType: ctx.chat?.type,
  });

  try {
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const clearedCount = contextService.clearUserContext(userId);

    const message =
      clearedCount > 0
        ? `üßπ **–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω!**

–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${clearedCount}

–¢–µ–ø–µ—Ä—å —è –Ω–µ –ø–æ–º–Ω—é –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥! üöÄ`
        : `üìù **–ö–æ–Ω—Ç–µ–∫—Å—Ç —É–∂–µ –ø—É—Å—Ç**

–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏.`;

    await safeReply(ctx, message, { parse_mode: "Markdown" });
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞", error);
    await safeReply(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.");
  }
};
