import { Telegraf } from "telegraf";
import { message } from "telegraf/filters";

import { getBotConfig } from "./config";
import {
  startHandler,
  helpHandler,
  unknownCommandHandler,
  styleHandler,
  stylesHandler,
  setStyleHandler,
  styleCallbackHandler,
  contextHandler,
  clearContextHandler,
  MessageHandlers,
} from "./handlers";
import { GeminiService, logger } from "./services";
import { BotContext } from "./types";
import { HttpServer } from "./server";

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞
 */
class TelegramBot {
  private bot: Telegraf<BotContext>;
  private geminiService: GeminiService;
  private messageHandlers: MessageHandlers;
  private httpServer: HttpServer;

  constructor() {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const config = getBotConfig();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    this.bot = new Telegraf<BotContext>(config.botToken);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    this.geminiService = new GeminiService(config.geminiApiKey);
    this.messageHandlers = new MessageHandlers(this.geminiService);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check
    const port = Number(process.env.PORT) || 3000;
    this.httpServer = new HttpServer(port);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.setupHandlers();
  }

  /**
   * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –µ–¥–∏–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   * –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ try/catch –≤ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
   */
  private withErrorHandling(
    handler: (ctx: BotContext) => Promise<void>
  ): (ctx: BotContext) => Promise<void> {
    return async (ctx: BotContext): Promise<void> => {
      try {
        await handler(ctx);
      } catch (error) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", error);
        void ctx.reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
      }
    };
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
   * –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ filter utils –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–µ—Ç–æ–¥–æ–≤
   */
  private setupHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    this.bot.start(startHandler);
    this.bot.help(helpHandler);
    this.bot.command("style", styleHandler);
    this.bot.command("styles", stylesHandler);
    this.bot.command("setstyle", setStyleHandler);
    this.bot.command("context", contextHandler);
    this.bot.command("clearcontext", clearContextHandler);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
    this.bot.on("callback_query", styleCallbackHandler);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∏—Å–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—ã)
    this.bot.on(
      message("text"),
      this.withErrorHandling(async (ctx: BotContext) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
        if (ctx.message && "text" in ctx.message && ctx.message.text) {
          if (ctx.message.text.startsWith("/")) {
            unknownCommandHandler(ctx);
            return;
          }
          await this.messageHandlers.handleTextMessage(ctx);
        }
      })
    );

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º message("photo") –≤–º–µ—Å—Ç–æ bot.on("photo")
    this.bot.on(
      message("photo"),
      this.withErrorHandling(async (ctx: BotContext) => {
        await this.messageHandlers.handleImageMessage(ctx);
      })
    );

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º message("voice")
    this.bot.on(
      message("voice"),
      this.withErrorHandling(async (ctx: BotContext) => {
        await this.messageHandlers.handleAudioMessage(ctx);
      })
    );

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º message("audio")
    this.bot.on(
      message("audio"),
      this.withErrorHandling(async (ctx: BotContext) => {
        await this.messageHandlers.handleAudioMessage(ctx);
      })
    );

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    // –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ø–∞–ª–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
    this.bot.on(
      "message",
      this.withErrorHandling(async (ctx: BotContext) => {
        await this.messageHandlers.handleUnsupportedMessage(ctx);
      })
    );

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ Telegraf
    this.bot.catch((err: unknown, ctx: BotContext) => {
      logger.error("–û—à–∏–±–∫–∞ Telegraf", err);
      void ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   */
  async start(): Promise<void> {
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check
      await this.httpServer.start();

      logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! üöÄ");
      logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏");
      logger.logSystemEvent("bot_started");
      await this.bot.launch();
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞", error);
      process.exit(1);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   */
  async stop(reason?: string): Promise<void> {
    logger.info(`–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞. –ü—Ä–∏—á–∏–Ω–∞: ${reason || "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}`);
    logger.logSystemEvent("bot_stopped", { reason });

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    await this.httpServer.stop();

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    this.bot.stop(reason);
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
const telegramBot = new TelegramBot();

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
telegramBot.start();

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
process.once("SIGINT", (): void => {
  void telegramBot.stop("SIGINT");
});
process.once("SIGTERM", (): void => {
  void telegramBot.stop("SIGTERM");
});
