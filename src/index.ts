// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
import {
  GoogleGenAI,
  createUserContent,
  createPartFromUri,
} from "@google/genai";

import { Telegraf, Context } from "telegraf";
import { Update } from "telegraf/typings/core/types/typegram";

import * as fs from "fs";

import * as path from "path";

import * as os from "os";

import * as dotenv from "dotenv";

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
type BotContext = Context<Update>;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ API-–∫–ª—é—á–∞ Gemini
if (!process.env.BOT_TOKEN) {
  console.error("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!");
  console.error(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ BOT_TOKEN=your_bot_token_here"
  );
  process.exit(1);
}

if (!process.env.GEMINI_API_KEY) {
  console.error("–û—à–∏–±–∫–∞: GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!");
  console.error(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GEMINI_API_KEY=your_gemini_api_key_here –≤ —Ñ–∞–π–ª .env"
  );
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const bot = new Telegraf<BotContext>(process.env.BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini API
const genAI = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });
const model = genAI.models;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx: BotContext) => {
  const userName = ctx.from?.first_name || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º void –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
  void ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç, ${userName}! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à Telegram –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Gemini API.\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞.`
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.help((ctx: BotContext) => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º void –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
  void ctx.reply(
    "ü§ñ **–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:**\n\n" +
      "üìù **–ö–æ–º–∞–Ω–¥—ã:**\n" +
      "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n" +
      "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n\n" +
      "üí¨ **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:**\n" +
      "‚Ä¢ **–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è** - –æ—Ç–≤–µ—á–∞—é —Å –ø–æ–º–æ—â—å—é –ò–ò\n" +
      "‚Ä¢ **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è** - —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∏ –æ—Ç–≤–µ—á–∞—é\n" +
      "‚Ä¢ **–ê—É–¥–∏–æ—Ñ–∞–π–ª—ã** - –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (—Ä–µ—á—å, –º—É–∑—ã–∫–∞, –ø–æ–¥–∫–∞—Å—Ç—ã)\n\n" +
      "üéµ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ:**\n" +
      "‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ - –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n" +
      "‚Ä¢ –î–ª–∏–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n" +
      "‚Ä¢ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã - –æ–ø—Ä–µ–¥–µ–ª—è—é —Ç–∏–ø –∏ –æ–ø–∏—Å—ã–≤–∞—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n" +
      "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ñ–æ—Ä–º–∞—Ç—ã: MP3, WAV, M4A, AAC, OGG, FLAC\n\n" +
      "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ! üöÄ"
  );
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é Gemini API
async function generateResponse(prompt: string): Promise<string> {
  try {
    // –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
    const basePrompt =
      "–¢—ã - —É–º–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ —á–∞—Ç–µ-—Ç–µ–ª–µ–≥—Ä–∞–º, –æ—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∂–∏ –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ";

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const fullPrompt = `${basePrompt}\n\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${prompt}`;

    const result = await model.generateContent({
      model: "gemini-2.5-flash",
      contents: fullPrompt,
    });
    return result.text || "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.";
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:", error);
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.";
  }
}

// –¢–∏–ø—ã –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–º—Ç–æ–≤
export enum AudioMessageType {
  VOICE = "voice",
  AUDIO_FILE = "audio_file",
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞—É–¥–∏–æ
function getAudioPrompt(
  messageType: AudioMessageType,
  duration?: number
): string {
  const basePrompt =
    "–¢—ã - —É–º–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ —á–∞—Ç–µ Telegram, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è.";

  switch (messageType) {
    case AudioMessageType.VOICE:
      if (duration && duration > 60) {
        // –î–ª–∏–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return `${basePrompt} 
        
–ó–ê–î–ê–ß–ê: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Ç–æ—á–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Ä–µ—á–∏
2. –í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
3. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –¥–∞–π –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
4. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Å—å–±—ã - —É–∫–∞–∂–∏, —á—Ç–æ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å
5. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∂–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
üìù **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:** [—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç]
üí° **–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:** [–∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã]
‚ùì **–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:** [–µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã]`;
      } else {
        // –ö–æ—Ä–æ—Ç–∫–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return `${basePrompt}
        
–ó–ê–î–ê–ß–ê: –û–±—Ä–∞–±–æ—Ç–∞–π —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π —Ä–µ—á—å —Ç–æ—á–Ω–æ
2. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∂–∏–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫
3. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å - –¥–∞–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç
4. –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
5. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ–¥–∂–∏
6. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –ø–æ –¥–µ–ª—É

–û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä! üó£Ô∏è`;
      }

    case AudioMessageType.AUDIO_FILE:
      return `${basePrompt}
      
–ó–ê–î–ê–ß–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª (–º–æ–∂–µ—Ç –±—ã—Ç—å –º—É–∑—ã–∫–∞, –ø–æ–¥–∫–∞—Å—Ç, –ª–µ–∫—Ü–∏—è –∏ —Ç.–¥.).

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ä–µ—á—å/–º—É–∑—ã–∫–∞/–¥—Ä—É–≥–æ–µ)
2. –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ—á—å - —Å–æ–∑–¥–∞–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
3. –ï—Å–ª–∏ —ç—Ç–æ –º—É–∑—ã–∫–∞ - –æ–ø–∏—à–∏ —Å—Ç–∏–ª—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
4. –í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
5. –î–∞–π –∫—Ä–∞—Ç–∫—É—é –æ—Ü–µ–Ω–∫—É –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
üéµ **–¢–∏–ø:** [—Ç–∏–ø –∞—É–¥–∏–æ]
üìÑ **–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** [–æ–ø–∏—Å–∞–Ω–∏–µ/—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è]
üí≠ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** [—Ç–≤–æ–∏ –º—ã—Å–ª–∏]`;

    default:
      return `${basePrompt} –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π –∏ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∞—É–¥–∏–æ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∂–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.`;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ MIME –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function getMimeTypeFromExtension(filename: string): string {
  const extension = filename.toLowerCase().split(".").pop();

  switch (extension) {
    case "mp3":
      return "audio/mp3";
    case "wav":
      return "audio/wav";
    case "m4a":
      return "audio/m4a";
    case "aac":
      return "audio/aac";
    case "ogg":
      return "audio/ogg";
    case "flac":
      return "audio/flac";
    default:
      return "audio/ogg"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é Gemini API
async function processAudioMessage(
  fileUrl: string,
  fileId: string,
  messageType: AudioMessageType,
  duration?: number,
  fileName?: string
): Promise<string> {
  try {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    const tempDir = path.join(os.tmpdir(), "tg-bot-audio");
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const fileExtension =
      messageType === AudioMessageType.VOICE
        ? "ogg"
        : fileName
        ? fileName.split(".").pop() || "mp3"
        : "mp3";

    // –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    const filePath = path.join(tempDir, `${fileId}.${fileExtension}`);

    console.log(
      `–û–±—Ä–∞–±–æ—Ç–∫–∞ ${
        messageType === AudioMessageType.VOICE
          ? "–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
          : "–∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"
      }...`
    );

    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const response = await fetch(fileUrl);

    if (!response.ok) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: ${response.statusText}`);
    }

    const fileBuffer = await response.arrayBuffer();
    fs.writeFileSync(filePath, Buffer.from(fileBuffer));

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–º—Ç
    const audioPrompt = getAudioPrompt(messageType, duration);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
    const mimeType = getMimeTypeFromExtension(filePath);

    console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Gemini API (${mimeType})...`);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Gemini API
    const myfile = await genAI.files.upload({
      file: filePath,
      config: { mimeType },
    });

    if (!myfile.uri || !myfile.mimeType) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ Gemini API");
    }

    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ...");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
    const result = await model.generateContent({
      model: "gemini-2.5-flash",
      contents: createUserContent([
        createPartFromUri(myfile.uri, myfile.mimeType),
        audioPrompt,
      ]),
    });

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try {
      fs.unlinkSync(filePath);
    } catch (unlinkError) {
      console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:", unlinkError);
    }

    const responseText = result.text;

    if (!responseText) {
      return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (messageType === AudioMessageType.VOICE && duration) {
      const durationText =
        duration > 60
          ? `${Math.floor(duration / 60)}:${(duration % 60)
              .toString()
              .padStart(2, "0")} –º–∏–Ω`
          : `${duration} —Å–µ–∫`;
      return `üé§ **–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ** (${durationText})\n\n${responseText}`;
    }

    return responseText;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è:", error);

    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error instanceof Error) {
      if (error.message.includes("User location is not supported")) {
        return "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN.";
      } else if (error.message.includes("quota")) {
        return "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
      } else if (error.message.includes("file size")) {
        return "üìÅ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∞—É–¥–∏–æ.";
      }
    }

    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.";
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", async (ctx: BotContext) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º
    if (ctx.message && "text" in ctx.message && ctx.message.text) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
      await ctx.sendChatAction("typing");

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageText = ctx.message.text;

      // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      if (messageText.startsWith("/")) {
        void ctx.reply(
          "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        );
        return;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Gemini API
      const response = await generateResponse(messageText);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      void ctx.reply(response);
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–º –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º
    else if (
      ctx.message &&
      ("voice" in ctx.message || "audio" in ctx.message)
    ) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
      await ctx.sendChatAction("record_voice");

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      const isVoice = "voice" in ctx.message;
      const fileInfo = isVoice ? ctx.message.voice : ctx.message.audio;
      const fileId = fileInfo.file_id;

      // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞—É–¥–∏–æ
      const messageType = isVoice
        ? AudioMessageType.VOICE
        : AudioMessageType.AUDIO_FILE;
      const duration = fileInfo.duration;
      const fileName = isVoice
        ? undefined
        : "file_name" in fileInfo && typeof fileInfo.file_name === "string"
        ? fileInfo.file_name
        : undefined;

      console.log(
        `–ü–æ–ª—É—á–µ–Ω–æ ${
          isVoice ? "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" : "–∞—É–¥–∏–æ—Ñ–∞–π–ª"
        } –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é ${duration || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"} —Å–µ–∫`
      );

      // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
      const fileUrl = await ctx.telegram.getFileLink(fileId);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞
      const response = await processAudioMessage(
        fileUrl.href,
        fileId,
        messageType,
        duration,
        fileName
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      void ctx.reply(response);
    } else {
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞
      void ctx.reply("–Ø –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è.");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    void ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err: unknown, ctx: BotContext) => {
  console.error("–û—à–∏–±–∫–∞ Telegraf:", err);
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º void –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
  void ctx.reply(
    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
  );
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
const startBot = async (): Promise<void> => {
  try {
    await bot.launch();
    console.log("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! üöÄ");
    console.log("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
startBot();

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
process.once("SIGINT", (): void => bot.stop("SIGINT"));
process.once("SIGTERM", (): void => bot.stop("SIGTERM"));
