import { createServer, IncomingMessage, ServerResponse } from "http";
import { logger } from "./services";

/**
 * –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check –∏ webhook
 * –ù—É–∂–µ–Ω –¥–ª—è Render hosting
 */
export class HttpServer {
  private server: ReturnType<typeof createServer>;
  private port: number;

  constructor(port: number = 3000) {
    this.port = port;
    this.server = createServer(this.handleRequest.bind(this));
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private handleRequest(req: IncomingMessage, res: ServerResponse): void {
    const url = req.url || "";
    const method = req.method || "GET";

    logger.info(`HTTP ${method} ${url}`);

    // Health check endpoint –¥–ª—è Render
    if (url === "/health" && method === "GET") {
      res.writeHead(200, { "Content-Type": "application/json" });
      res.end(
        JSON.stringify({
          status: "ok",
          timestamp: new Date().toISOString(),
          service: "ai-tg-bot",
        })
      );
      return;
    }

    // Webhook endpoint (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–º)
    if (url === "/webhook" && method === "POST") {
      res.writeHead(200, { "Content-Type": "application/json" });
      res.end(JSON.stringify({ received: true }));
      return;
    }

    // –ö–æ—Ä–Ω–µ–≤–æ–π endpoint
    if (url === "/" && method === "GET") {
      res.writeHead(200, { "Content-Type": "text/plain" });
      res.end("AI Telegram Bot is running! ü§ñ");
      return;
    }

    // 404 –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    res.writeHead(404, { "Content-Type": "text/plain" });
    res.end("Not Found");
  }

  /**
   * –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
   */
  start(): Promise<void> {
    return new Promise((resolve, reject) => {
      this.server.listen(this.port, (err?: Error) => {
        if (err) {
          logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞", err);
          reject(err);
        } else {
          logger.info(`HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}`);
          resolve();
        }
      });
    });
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞
   */
  stop(): Promise<void> {
    return new Promise((resolve) => {
      this.server.close(() => {
        logger.info("HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        resolve();
      });
    });
  }
}
