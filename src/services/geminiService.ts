import {
  GoogleGenAI,
  createUserContent,
  createPartFromUri,
  Models,
} from "@google/genai";

import { promptConfig, basePromptVariants } from "../config";
import { ResponseStyle } from "../types";

import { logger } from "./loggerService";

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini API
 */
export class GeminiService {
  private genAI: GoogleGenAI;
  private model: Models;

  constructor(apiKey: string) {
    this.genAI = new GoogleGenAI({ apiKey });
    this.model = this.genAI.models;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º—Ç–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   * @param prompt - —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param responseStyle - —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param context - –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns Promise<string> - –æ—Ç–≤–µ—Ç –æ—Ç Gemini
   */
  async generateTextResponse(
    prompt: string,
    responseStyle?: ResponseStyle,
    context?: string
  ): Promise<string> {
    const startTime = Date.now();

    try {
      // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–º—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const basePrompt = responseStyle
        ? basePromptVariants[responseStyle]
        : promptConfig.basePrompt;

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const fullPrompt = `${basePrompt}${
        context || ""
      }\n\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${prompt}`;

      logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API", {
        promptLength: fullPrompt.length,
        responseStyle: responseStyle || "default",
        hasContext: !!context,
        model: "gemini-2.5-flash",
      });

      const result = await this.model.generateContent({
        model: "gemini-2.5-flash",
        contents: fullPrompt,
      });

      const duration = Date.now() - startTime;
      logger.logApiCall("Gemini", "generateTextResponse", duration, true);

      return result.text || "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.";
    } catch (error) {
      const duration = Date.now() - startTime;
      logger.logApiCall(
        "Gemini",
        "generateTextResponse",
        duration,
        false,
        error as Error
      );
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", error);
      return this.handleError(error);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Gemini API
   * @param filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
   * @param mimeType - MIME —Ç–∏–ø —Ñ–∞–π–ª–∞
   * @returns Promise<{uri: string, mimeType: string}> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
   */
  async uploadFile(
    filePath: string,
    mimeType: string
  ): Promise<{ uri: string; mimeType: string }> {
    const startTime = Date.now();

    try {
      logger.debug("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Gemini API", {
        filePath,
        mimeType,
      });

      const myfile = await this.genAI.files.upload({
        file: filePath,
        config: { mimeType },
      });

      if (!myfile.uri || !myfile.mimeType) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ Gemini API");
      }

      const duration = Date.now() - startTime;
      logger.logApiCall("Gemini", "uploadFile", duration, true);

      return {
        uri: myfile.uri,
        mimeType: myfile.mimeType,
      };
    } catch (error) {
      const duration = Date.now() - startTime;
      logger.logApiCall(
        "Gemini",
        "uploadFile",
        duration,
        false,
        error as Error
      );
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ Gemini API", error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏ –ø—Ä–æ–º—Ç–∞
   * @param fileUri - URI –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
   * @param fileMimeType - MIME —Ç–∏–ø —Ñ–∞–π–ª–∞
   * @param prompt - –ø—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   * @returns Promise<string> - –æ—Ç–≤–µ—Ç –æ—Ç Gemini
   */
  async generateMediaResponse(
    fileUri: string,
    fileMimeType: string,
    prompt: string
  ): Promise<string> {
    const startTime = Date.now();

    try {
      logger.debug("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª", {
        fileUri,
        fileMimeType,
        promptLength: prompt.length,
      });

      const result = await this.model.generateContent({
        model: "gemini-2.5-flash",
        contents: createUserContent([
          createPartFromUri(fileUri, fileMimeType),
          prompt,
        ]),
      });

      const responseText = result.text;

      if (!responseText) {
        logger.warn("Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª");
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
      }

      const duration = Date.now() - startTime;
      logger.logApiCall("Gemini", "generateMediaResponse", duration, true);

      return responseText;
    } catch (error) {
      const duration = Date.now() - startTime;
      logger.logApiCall(
        "Gemini",
        "generateMediaResponse",
        duration,
        false,
        error as Error
      );
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª", error);
      return this.handleError(error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param error - –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
   * @returns —Å—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—à–∏–±–∫–∏
   */
  private handleError(error: unknown): string {
    if (error instanceof Error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ Gemini API
      if (error.message.includes("User location is not supported")) {
        return "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN.";
      } else if (error.message.includes("quota")) {
        return "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
      } else if (error.message.includes("file size")) {
        return "üìÅ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.";
      } else if (error.message.includes("unsupported")) {
        return "üö´ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.";
      }
    }

    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
  }
}
