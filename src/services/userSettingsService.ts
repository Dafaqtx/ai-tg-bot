import fs from "fs";

import path from "path";

import {
  UserSettings,
  ResponseStyle,
  StyleDescription,
  ContextSettings,
} from "../types";

import { DEFAULT_CONTEXT_SETTINGS } from "./contextService";
import { logger } from "./loggerService";

/**
 * –û–ø–∏—Å–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –æ—Ç–≤–µ—Ç–æ–≤
 */
export const STYLE_DESCRIPTIONS: StyleDescription[] = [
  {
    key: "concise",
    name: "–ö—Ä–∞—Ç–∫–∏–π",
    description: "–ö–æ—Ä–æ—Ç–∫–∏–µ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —ç–º–æ–¥–∂–∏",
    emoji: "‚ö°",
  },
  {
    key: "friendly",
    name: "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
    description: "–¢–µ–ø–ª–æ–µ –∏ –ø–æ–Ω–∏–º–∞—é—â–µ–µ –æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Å –¥—Ä—É–≥–æ–º",
    emoji: "üòä",
  },
  {
    key: "detailed",
    name: "–ü–æ–¥—Ä–æ–±–Ω—ã–π",
    description: "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏",
    emoji: "üìö",
  },
  {
    key: "expert",
    name: "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π",
    description: "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã",
    emoji: "üß†",
  },
  {
    key: "medical",
    name: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π",
    description: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∑–¥–æ—Ä–æ–≤—å—è",
    emoji: "ü©∫",
  },
  {
    key: "educational",
    name: "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π",
    description:
      "–û–±—ä—è—Å–Ω–µ–Ω–∏—è –∫–∞–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ –ø–æ—à–∞–≥–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏",
    emoji: "üéì",
  },
  {
    key: "motivational",
    name: "–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π",
    description: "–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã —Å –ø—Ä–∏–∑—ã–≤–∞–º–∏ –∫ –¥–µ–π—Å—Ç–≤–∏—é",
    emoji: "üí™",
  },
  {
    key: "developer",
    name: "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–∏–π",
    description: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞ –∏ IT-—Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–µ–π",
    emoji: "üíª",
  },
  {
    key: "humorous",
    name: "–Æ–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π",
    description: "–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —à—É—Ç–∫–∞–º–∏ –∏ –ª–µ–≥–∫–∏–º —Ç–æ–Ω–æ–º",
    emoji: "üòÑ",
  },
  {
    key: "calm",
    name: "–°–ø–æ–∫–æ–π–Ω—ã–π",
    description: "–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–µ –∏ —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞",
    emoji: "üßò",
  },
];

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ JSON —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
 */
export class UserSettingsService {
  private static instance: UserSettingsService;
  private settingsFile: string;
  private userSettings: Map<number, UserSettings> = new Map();

  constructor() {
    // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    this.settingsFile = path.join(process.cwd(), "data", "user-settings.json");
    this.ensureDataDirectory();
    this.loadSettings();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (Singleton)
   */
  public static getInstance(): UserSettingsService {
    if (!UserSettingsService.instance) {
      UserSettingsService.instance = new UserSettingsService();
    }
    return UserSettingsService.instance;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
   */
  private ensureDataDirectory(): void {
    const dataDir = path.join(process.cwd(), "data");
    if (!fs.existsSync(dataDir)) {
      fs.mkdirSync(dataDir, { recursive: true });
      logger.info("–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö", { path: dataDir });
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
   */
  private loadSettings(): void {
    try {
      if (fs.existsSync(this.settingsFile)) {
        const data = fs.readFileSync(this.settingsFile, "utf8");
        const settings: UserSettings[] = JSON.parse(data);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –≤ Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        this.userSettings.clear();
        settings.forEach((setting) => {
          // –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          if (!setting.contextSettings) {
            setting.contextSettings = { ...DEFAULT_CONTEXT_SETTINGS };
          }
          this.userSettings.set(setting.userId, setting);
        });

        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã", {
          usersCount: settings.length,
        });
      } else {
        logger.info("–§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π");
        this.saveSettings();
      }
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é Map
      this.userSettings.clear();
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª
   */
  private saveSettings(): void {
    try {
      const settings = Array.from(this.userSettings.values());
      fs.writeFileSync(
        this.settingsFile,
        JSON.stringify(settings, null, 2),
        "utf8"
      );

      logger.debug("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", {
        usersCount: settings.length,
      });
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param username - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public getUserSettings(userId: number, username?: string): UserSettings {
    let settings = this.userSettings.get(userId);

    if (!settings) {
      // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      settings = {
        userId,
        username,
        responseStyle: "friendly", // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∏–ª—å
        contextSettings: { ...DEFAULT_CONTEXT_SETTINGS }, // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };

      this.userSettings.set(userId, settings);
      this.saveSettings();

      logger.logUserActivity(userId, username, "settings_created", {
        defaultStyle: settings.responseStyle,
        contextEnabled: settings.contextSettings.enabled,
      });
    }

    return settings;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param responseStyle - –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤
   * @param username - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  public updateUserStyle(
    userId: number,
    responseStyle: ResponseStyle,
    username?: string
  ): UserSettings {
    const settings = this.getUserSettings(userId, username);
    const oldStyle = settings.responseStyle;

    settings.responseStyle = responseStyle;
    settings.updatedAt = new Date().toISOString();

    // –û–±–Ω–æ–≤–ª—è–µ–º username –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    if (username) {
      settings.username = username;
    }

    this.userSettings.set(userId, settings);
    this.saveSettings();

    logger.logUserActivity(userId, username, "style_changed", {
      oldStyle,
      newStyle: responseStyle,
    });

    return settings;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è –ø–æ –∫–ª—é—á—É
   * @param styleKey - –∫–ª—é—á —Å—Ç–∏–ª—è
   * @returns –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è –∏–ª–∏ undefined
   */
  public getStyleDescription(
    styleKey: ResponseStyle
  ): StyleDescription | undefined {
    return STYLE_DESCRIPTIONS.find((style) => style.key === styleKey);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏
   * @returns –º–∞—Å—Å–∏–≤ –æ–ø–∏—Å–∞–Ω–∏–π —Å—Ç–∏–ª–µ–π
   */
  public getAllStyles(): StyleDescription[] {
    return STYLE_DESCRIPTIONS;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∏–ª—å –≤–∞–ª–∏–¥–Ω—ã–º
   * @param style - —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns true –µ—Å–ª–∏ —Å—Ç–∏–ª—å –≤–∞–ª–∏–¥–Ω—ã–π
   */
  public isValidStyle(style: string): style is ResponseStyle {
    return STYLE_DESCRIPTIONS.some((desc) => desc.key === style);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∏–ª–µ–π
   * @returns –æ–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
   */
  public getStyleStats(): Record<ResponseStyle, number> {
    const stats: Record<ResponseStyle, number> = {
      detailed: 0,
      concise: 0,
      friendly: 0,
      expert: 0,
      medical: 0,
      educational: 0,
      motivational: 0,
      developer: 0,
      humorous: 0,
      calm: 0,
    };

    this.userSettings.forEach((settings) => {
      stats[settings.responseStyle]++;
    });

    return stats;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param contextSettings - –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   * @param username - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  public updateUserContextSettings(
    userId: number,
    contextSettings: Partial<ContextSettings>,
    username?: string
  ): UserSettings {
    const settings = this.getUserSettings(userId, username);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings.contextSettings = {
      ...settings.contextSettings,
      ...contextSettings,
    };

    settings.updatedAt = new Date().toISOString();

    // –û–±–Ω–æ–≤–ª—è–µ–º username –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    if (username) {
      settings.username = username;
    }

    this.userSettings.set(userId, settings);
    this.saveSettings();

    logger.logUserActivity(userId, username, "context_settings_changed", {
      newSettings: contextSettings,
    });

    return settings;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @returns –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  public getUsersCount(): number {
    return this.userSettings.size;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const userSettingsService = UserSettingsService.getInstance();
