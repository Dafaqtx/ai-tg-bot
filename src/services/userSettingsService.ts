import {
  UserSettings,
  ResponseStyle,
  StyleDescription,
  ContextSettings,
} from "../types";

import { DEFAULT_CONTEXT_SETTINGS } from "./contextService";
import { DatabaseService } from "./databaseService";
import { logger } from "./loggerService";

/**
 * –û–ø–∏—Å–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –æ—Ç–≤–µ—Ç–æ–≤
 */
export const STYLE_DESCRIPTIONS: StyleDescription[] = [
  {
    key: "concise",
    name: "–ö—Ä–∞—Ç–∫–∏–π",
    description: "–ö–æ—Ä–æ—Ç–∫–∏–µ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —ç–º–æ–¥–∂–∏",
    emoji: "‚ö°",
  },
  {
    key: "friendly",
    name: "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
    description: "–¢–µ–ø–ª–æ–µ –∏ –ø–æ–Ω–∏–º–∞—é—â–µ–µ –æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Å –¥—Ä—É–≥–æ–º",
    emoji: "üòä",
  },
  {
    key: "detailed",
    name: "–ü–æ–¥—Ä–æ–±–Ω—ã–π",
    description: "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏",
    emoji: "üìö",
  },
  {
    key: "expert",
    name: "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π",
    description: "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã",
    emoji: "üß†",
  },
  {
    key: "medical",
    name: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π",
    description: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∑–¥–æ—Ä–æ–≤—å—è",
    emoji: "ü©∫",
  },
  {
    key: "educational",
    name: "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π",
    description:
      "–û–±—ä—è—Å–Ω–µ–Ω–∏—è –∫–∞–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ –ø–æ—à–∞–≥–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏",
    emoji: "üéì",
  },
  {
    key: "motivational",
    name: "–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π",
    description: "–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã —Å –ø—Ä–∏–∑—ã–≤–∞–º–∏ –∫ –¥–µ–π—Å—Ç–≤–∏—é",
    emoji: "üí™",
  },
  {
    key: "developer",
    name: "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–∏–π",
    description: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞ –∏ IT-—Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–µ–π",
    emoji: "üíª",
  },
  {
    key: "humorous",
    name: "–Æ–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π",
    description: "–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —à—É—Ç–∫–∞–º–∏ –∏ –ª–µ–≥–∫–∏–º —Ç–æ–Ω–æ–º",
    emoji: "üòÑ",
  },
  {
    key: "calm",
    name: "–°–ø–æ–∫–æ–π–Ω—ã–π",
    description: "–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–µ –∏ —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞",
    emoji: "üßò",
  },
];

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
export class UserSettingsService {
  private static instance: UserSettingsService;
  private db: DatabaseService;

  constructor() {
    this.db = DatabaseService.getInstance();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (Singleton)
   */
  public static getInstance(): UserSettingsService {
    if (!UserSettingsService.instance) {
      UserSettingsService.instance = new UserSettingsService();
    }
    return UserSettingsService.instance;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param username - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public getUserSettings(userId: number, username?: string): UserSettings {
    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const selectStmt = this.db.prepare(`
        SELECT 
          user_id,
          username,
          response_style,
          context_enabled,
          context_max_messages,
          context_max_tokens,
          context_auto_cleanup,
          created_at,
          updated_at
        FROM user_settings 
        WHERE user_id = ?
      `);

      const row = selectStmt.get(userId);

      if (row) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –≤ –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const settings: UserSettings = {
          userId: row.user_id,
          username: row.username,
          responseStyle: row.response_style as ResponseStyle,
          contextSettings: {
            enabled: Boolean(row.context_enabled),
            maxMessages: row.context_max_messages,
            maxTokens: row.context_max_tokens,
            autoCleanup: Boolean(row.context_auto_cleanup),
          },
          createdAt: row.created_at,
          updatedAt: row.updated_at,
        };

        return settings;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const defaultSettings: UserSettings = {
        userId,
        username,
        responseStyle: "friendly", // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∏–ª—å
        contextSettings: { ...DEFAULT_CONTEXT_SETTINGS }, // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑—É
      const insertStmt = this.db.prepare(`
        INSERT INTO user_settings (
          user_id, 
          username, 
          response_style,
          context_enabled,
          context_max_messages,
          context_max_tokens,
          context_auto_cleanup
        ) VALUES (?, ?, ?, ?, ?, ?, ?)
      `);

      insertStmt.run(
        userId,
        username,
        defaultSettings.responseStyle,
        defaultSettings.contextSettings.enabled ? 1 : 0,
        defaultSettings.contextSettings.maxMessages,
        defaultSettings.contextSettings.maxTokens,
        defaultSettings.contextSettings.autoCleanup ? 1 : 0
      );

      logger.logUserActivity(userId, username, "settings_created", {
        defaultStyle: defaultSettings.responseStyle,
        contextEnabled: defaultSettings.contextSettings.enabled,
      });

      return defaultSettings;
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", {
        userId,
        username,
        error,
      });
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param responseStyle - –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤
   * @param username - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  public updateUserStyle(
    userId: number,
    responseStyle: ResponseStyle,
    username?: string
  ): UserSettings {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const updateStmt = this.db.prepare(`
        UPDATE user_settings 
        SET response_style = ?, username = COALESCE(?, username)
        WHERE user_id = ?
      `);

      const result = updateStmt.run(responseStyle, username, userId);

      if (result.changes === 0) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return this.getUserSettings(userId, username);
      }

      logger.logUserActivity(userId, username, "style_updated", {
        newStyle: responseStyle,
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      return this.getUserSettings(userId, username);
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", {
        userId,
        responseStyle,
        username,
        error,
      });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è –ø–æ –∫–ª—é—á—É
   * @param styleKey - –∫–ª—é—á —Å—Ç–∏–ª—è
   * @returns –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è –∏–ª–∏ undefined
   */
  public getStyleDescription(
    styleKey: ResponseStyle
  ): StyleDescription | undefined {
    return STYLE_DESCRIPTIONS.find((style) => style.key === styleKey);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏
   * @returns –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Å—Ç–∏–ª–µ–π
   */
  public getAllStyles(): StyleDescription[] {
    return STYLE_DESCRIPTIONS;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º —Å—Ç–∏–ª–µ–º
   * @param style - —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns true, –µ—Å–ª–∏ —Å—Ç–∏–ª—å –≤–∞–ª–∏–¥–µ–Ω
   */
  public isValidStyle(style: string): style is ResponseStyle {
    return STYLE_DESCRIPTIONS.some((desc) => desc.key === style);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∏–ª–µ–π
   * @returns –æ–±—ä–µ–∫—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∏–ª—è
   */
  public getStyleStats(): Record<ResponseStyle, number> {
    try {
      const statsStmt = this.db.prepare(`
        SELECT response_style, COUNT(*) as count 
        FROM user_settings 
        GROUP BY response_style
      `);

      const rows = statsStmt.all();
      const stats: Record<ResponseStyle, number> = {} as Record<
        ResponseStyle,
        number
      >;

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏ –Ω—É–ª—è–º–∏
      STYLE_DESCRIPTIONS.forEach((style) => {
        stats[style.key] = 0;
      });

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      rows.forEach((row: { response_style: string; count: number }) => {
        if (this.isValidStyle(row.response_style)) {
          stats[row.response_style as ResponseStyle] = row.count;
        }
      });

      return stats;
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç–∏–ª–µ–π", error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param contextSettings - –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   * @param username - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  public updateUserContextSettings(
    userId: number,
    contextSettings: Partial<ContextSettings>,
    username?: string
  ): UserSettings {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const currentSettings = this.getUserSettings(userId, username);

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      const newContextSettings = {
        ...currentSettings.contextSettings,
        ...contextSettings,
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const updateStmt = this.db.prepare(`
        UPDATE user_settings 
        SET 
          context_enabled = ?,
          context_max_messages = ?,
          context_max_tokens = ?,
          context_auto_cleanup = ?,
          username = COALESCE(?, username)
        WHERE user_id = ?
      `);

      updateStmt.run(
        newContextSettings.enabled ? 1 : 0,
        newContextSettings.maxMessages,
        newContextSettings.maxTokens,
        newContextSettings.autoCleanup ? 1 : 0,
        username,
        userId
      );

      logger.logUserActivity(userId, username, "context_settings_updated", {
        newSettings: newContextSettings,
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      return this.getUserSettings(userId, username);
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞", {
        userId,
        contextSettings,
        username,
        error,
      });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @returns –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  public getUsersCount(): number {
    try {
      const countStmt = this.db.prepare(`
        SELECT COUNT(*) as count FROM user_settings
      `);

      const result = countStmt.get();
      return result.count;
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", error);
      throw error;
    }
  }
}
