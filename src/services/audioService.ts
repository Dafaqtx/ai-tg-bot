import * as path from "path";
import { AudioMessageType, FileInfo, MediaProcessResult } from "../types";
import { promptConfig, TEMP_DIRS } from "../config";
import { GeminiService } from "./geminiService";
import {
  createTempDir,
  downloadFile,
  getMimeTypeFromExtension,
  safeDeleteFile,
  formatDuration,
} from "../utils";

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π
 */
export class AudioService {
  constructor(private geminiService: GeminiService) {}

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ (–≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª)
   * @param fileInfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
   * @param messageType - —Ç–∏–ø –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns Promise<MediaProcessResult> - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async processAudioMessage(
    fileInfo: FileInfo,
    messageType: AudioMessageType
  ): Promise<MediaProcessResult> {
    let filePath: string | null = null;

    try {
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      const tempDir = createTempDir(TEMP_DIRS.AUDIO);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      const fileExtension = this.getFileExtension(
        messageType,
        fileInfo.fileName
      );

      // –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
      filePath = path.join(tempDir, `${fileInfo.fileId}.${fileExtension}`);

      console.log(
        `–û–±—Ä–∞–±–æ—Ç–∫–∞ ${
          messageType === AudioMessageType.VOICE
            ? "–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
            : "–∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"
        }...`
      );

      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      await downloadFile(fileInfo.fileUrl, filePath);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–º—Ç
      const audioPrompt = this.getAudioPrompt(messageType, fileInfo.duration);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
      const mimeType = getMimeTypeFromExtension(filePath);

      console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Gemini API (${mimeType})...`);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Gemini API
      const uploadedFile = await this.geminiService.uploadFile(
        filePath,
        mimeType
      );

      console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ...");

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Gemini
      const responseText = await this.geminiService.generateMediaResponse(
        uploadedFile.uri,
        uploadedFile.mimeType,
        audioPrompt
      );

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      const finalResponse = this.formatResponse(
        messageType,
        responseText,
        fileInfo.duration
      );

      return {
        success: true,
        message: finalResponse,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è:", error);

      return {
        success: false,
        message: this.getErrorMessage(error),
        error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      };
    } finally {
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      if (filePath) {
        safeDeleteFile(filePath);
      }
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param messageType - —Ç–∏–ø –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è
   * @param fileName - –∏–º—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
   * @returns —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
   */
  private getFileExtension(
    messageType: AudioMessageType,
    fileName?: string
  ): string {
    if (messageType === AudioMessageType.VOICE) {
      return "ogg";
    }

    if (fileName) {
      return fileName.split(".").pop() || "mp3";
    }

    return "mp3";
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   * @param messageType - —Ç–∏–ø –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è
   * @param duration - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
   * @returns –ø—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  private getAudioPrompt(
    messageType: AudioMessageType,
    duration?: number
  ): string {
    const basePrompt =
      "–¢—ã - —É–º–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ —á–∞—Ç–µ Telegram, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è.";

    switch (messageType) {
      case AudioMessageType.VOICE:
        if (duration && duration > 60) {
          // –î–ª–∏–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
          return `${basePrompt} 
        
–ó–ê–î–ê–ß–ê: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Ç–æ—á–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Ä–µ—á–∏
2. –í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
3. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –¥–∞–π –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
4. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Å—å–±—ã - —É–∫–∞–∂–∏, —á—Ç–æ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å
5. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∂–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
üìù **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:** [—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç]
üí° **–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:** [–∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã]
‚ùì **–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:** [–µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã]`;
        } else {
          // –ö–æ—Ä–æ—Ç–∫–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥
          return promptConfig.voicePrompt;
        }

      case AudioMessageType.AUDIO_FILE:
        return promptConfig.audioFilePrompt;

      default:
        return `${basePrompt} –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π –∏ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∞—É–¥–∏–æ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∂–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.`;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param messageType - —Ç–∏–ø –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è
   * @param responseText - –æ—Ç–≤–µ—Ç –æ—Ç Gemini
   * @param duration - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
   * @returns –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
   */
  private formatResponse(
    messageType: AudioMessageType,
    responseText: string,
    duration?: number
  ): string {
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (messageType === AudioMessageType.VOICE && duration) {
      const durationText = formatDuration(duration);
      return `üé§ **–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ** (${durationText})\n\n${responseText}`;
    }

    return responseText;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   * @param error - –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
   * @returns —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  private getErrorMessage(error: unknown): string {
    if (error instanceof Error) {
      if (error.message.includes("User location is not supported")) {
        return "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN.";
      } else if (error.message.includes("quota")) {
        return "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
      } else if (error.message.includes("file size")) {
        return "üìÅ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∞—É–¥–∏–æ.";
      }
    }

    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.";
  }
}
