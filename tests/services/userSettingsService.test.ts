import fs from "fs";

import { ResponseStyle } from "../../src/types";
import {
  UserSettingsService,
  STYLE_DESCRIPTIONS,
} from "../../src/services/userSettingsService";

// –ú–æ–∫–∞–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
jest.mock("fs");
const mockFs = fs as jest.Mocked<typeof fs>;

// –ú–æ–∫–∞–µ–º –ª–æ–≥–≥–µ—Ä
jest.mock("../../src/services/loggerService", () => ({
  logger: {
    info: jest.fn(),
    debug: jest.fn(),
    error: jest.fn(),
    logUserActivity: jest.fn(),
  },
}));

describe("UserSettingsService", () => {
  let userSettingsService: UserSettingsService;
  let originalCwd: string;

  beforeEach(() => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π cwd
    originalCwd = process.cwd();

    // –û—á–∏—â–∞–µ–º –º–æ–∫–∏
    jest.clearAllMocks();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    mockFs.existsSync.mockReturnValue(false);
    mockFs.readFileSync.mockReturnValue("[]");
    mockFs.writeFileSync.mockImplementation(() => {});
    mockFs.mkdirSync.mockImplementation(() => "");

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    userSettingsService = new (UserSettingsService as any)();
  });

  afterEach(() => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π cwd
    Object.defineProperty(process, "cwd", {
      value: () => originalCwd,
    });
  });

  describe("Singleton pattern", () => {
    it("–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä", () => {
      const instance1 = UserSettingsService.getInstance();
      const instance2 = UserSettingsService.getInstance();

      expect(instance1).toBe(instance2);
    });
  });

  describe("getUserSettings", () => {
    it("–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", () => {
      const userId = 12345;
      const username = "testuser";

      const settings = userSettingsService.getUserSettings(userId, username);

      expect(settings).toMatchObject({
        userId,
        username,
        responseStyle: "friendly",
      });
      expect(settings.createdAt).toBeDefined();
      expect(settings.updatedAt).toBeDefined();
    });

    it("–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", () => {
      const userId = 12345;
      const username = "testuser";

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const settings1 = userSettingsService.getUserSettings(userId, username);

      // –ü–æ–ª—É—á–∞–µ–º –µ–≥–æ —Å–Ω–æ–≤–∞
      const settings2 = userSettingsService.getUserSettings(userId, username);

      expect(settings1).toBe(settings2);
    });
  });

  describe("updateUserStyle", () => {
    it("–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", () => {
      const userId = 12345;
      const username = "testuser";
      const newStyle: ResponseStyle = "expert";

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const initialSettings = userSettingsService.getUserSettings(
        userId,
        username
      );
      expect(initialSettings.responseStyle).toBe("friendly");

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å
      const updatedSettings = userSettingsService.updateUserStyle(
        userId,
        newStyle,
        username
      );

      expect(updatedSettings.responseStyle).toBe(newStyle);
      expect(updatedSettings).toBe(initialSettings); // —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç, –∏–∑–º–µ–Ω–µ–Ω
      expect(updatedSettings.updatedAt).toBeDefined();
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å username –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω", () => {
      const userId = 12345;
      const oldUsername = "olduser";
      const newUsername = "newuser";

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userSettingsService.getUserSettings(userId, oldUsername);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å —Å –Ω–æ–≤—ã–º username
      const updatedSettings = userSettingsService.updateUserStyle(
        userId,
        "detailed",
        newUsername
      );

      expect(updatedSettings.username).toBe(newUsername);
    });

    it("–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–æ–≤—ã–º–∏ —Å—Ç–∏–ª—è–º–∏", () => {
      const userId = 67890;
      const username = "developer";

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∏–ª–∏
      const styles: ResponseStyle[] = [
        "educational",
        "motivational",
        "developer",
        "humorous",
        "calm",
      ];

      styles.forEach((style) => {
        const settings = userSettingsService.updateUserStyle(
          userId,
          style,
          username
        );
        expect(settings.responseStyle).toBe(style);
      });
    });
  });

  describe("Style descriptions", () => {
    it("–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è", () => {
      const description = userSettingsService.getStyleDescription("friendly");

      expect(description).toMatchObject({
        key: "friendly",
        name: "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
        emoji: "üòä",
      });
    });

    it("–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å undefined –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç–∏–ª—è", () => {
      const description = userSettingsService.getStyleDescription(
        "nonexistent" as ResponseStyle
      );

      expect(description).toBeUndefined();
    });

    it("–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏", () => {
      const styles = userSettingsService.getAllStyles();

      expect(styles).toEqual(STYLE_DESCRIPTIONS);
      expect(styles).toHaveLength(10); // –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è 10 —Å—Ç–∏–ª–µ–π
    });
  });

  describe("Style validation", () => {
    it("–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏", () => {
      // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
      expect(userSettingsService.isValidStyle("friendly")).toBe(true);
      expect(userSettingsService.isValidStyle("expert")).toBe(true);
      expect(userSettingsService.isValidStyle("detailed")).toBe(true);
      expect(userSettingsService.isValidStyle("concise")).toBe(true);
      expect(userSettingsService.isValidStyle("medical")).toBe(true);

      // –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏
      expect(userSettingsService.isValidStyle("educational")).toBe(true);
      expect(userSettingsService.isValidStyle("motivational")).toBe(true);
      expect(userSettingsService.isValidStyle("developer")).toBe(true);
      expect(userSettingsService.isValidStyle("humorous")).toBe(true);
      expect(userSettingsService.isValidStyle("calm")).toBe(true);
    });

    it("–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏", () => {
      expect(userSettingsService.isValidStyle("invalid")).toBe(false);
      expect(userSettingsService.isValidStyle("")).toBe(false);
      expect(userSettingsService.isValidStyle("FRIENDLY")).toBe(false);
    });
  });

  describe("Statistics", () => {
    beforeEach(() => {
      // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
      userSettingsService.updateUserStyle(1, "friendly");
      userSettingsService.updateUserStyle(2, "friendly");
      userSettingsService.updateUserStyle(3, "expert");
      userSettingsService.updateUserStyle(4, "detailed");
    });

    it("–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∏–ª–µ–π", () => {
      const stats = userSettingsService.getStyleStats();

      expect(stats).toMatchObject({
        friendly: 2,
        expert: 1,
        detailed: 1,
        concise: 0,
        medical: 0,
        educational: 0,
        motivational: 0,
        developer: 0,
        humorous: 0,
        calm: 0,
      });
    });

    it("–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", () => {
      const count = userSettingsService.getUsersCount();

      expect(count).toBe(4);
    });
  });

  describe("File operations", () => {
    it("–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç", () => {
      mockFs.existsSync.mockReturnValue(false);

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
      new (UserSettingsService as any)();

      expect(mockFs.mkdirSync).toHaveBeenCalledWith(
        expect.stringContaining("data"),
        { recursive: true }
      );
    });

    it("–¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", () => {
      const mockData = JSON.stringify([
        {
          userId: 123,
          username: "testuser",
          responseStyle: "expert",
          createdAt: "2023-01-01T00:00:00.000Z",
          updatedAt: "2023-01-01T00:00:00.000Z",
        },
      ]);

      mockFs.existsSync.mockReturnValue(true);
      mockFs.readFileSync.mockReturnValue(mockData);

      const service = new (UserSettingsService as any)();
      const settings = service.getUserSettings(123);

      expect(settings.responseStyle).toBe("expert");
      expect(settings.username).toBe("testuser");
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞", () => {
      mockFs.existsSync.mockReturnValue(true);
      mockFs.readFileSync.mockImplementation(() => {
        throw new Error("File read error");
      });

      // –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É
      expect(() => {
        new (UserSettingsService as any)();
      }).not.toThrow();
    });

    it("–¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª", () => {
      userSettingsService.updateUserStyle(123, "friendly", "testuser");

      expect(mockFs.writeFileSync).toHaveBeenCalledWith(
        expect.stringContaining("user-settings.json"),
        expect.any(String),
        "utf8"
      );
    });
  });
});
