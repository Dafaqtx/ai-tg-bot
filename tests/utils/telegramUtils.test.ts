import {
  hasMarkdownIssues,
  escapeMarkdown,
  splitLongMessage,
} from "../../src/utils/telegramUtils";

describe("TelegramUtils", () => {
  describe("hasMarkdownIssues", () => {
    it("–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏", () => {
      expect(hasMarkdownIssues("–≠—Ç–æ *–Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")).toBe(true);
      expect(hasMarkdownIssues("–≠—Ç–æ *–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π* —Ç–µ–∫—Å—Ç")).toBe(false);
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è", () => {
      expect(hasMarkdownIssues("–≠—Ç–æ _–Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")).toBe(true);
      expect(hasMarkdownIssues("–≠—Ç–æ _–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_ —Ç–µ–∫—Å—Ç")).toBe(false);
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏", () => {
      expect(hasMarkdownIssues("–ö–æ–¥ `–Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–π")).toBe(true);
      expect(hasMarkdownIssues("–ö–æ–¥ `–∑–∞–∫—Ä—ã—Ç—ã–π`")).toBe(false);
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏", () => {
      expect(hasMarkdownIssues("–°—Å—ã–ª–∫–∞ [–Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è")).toBe(true);
      expect(hasMarkdownIssues("–°—Å—ã–ª–∫–∞ (–Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è")).toBe(true);
      expect(hasMarkdownIssues("–°—Å—ã–ª–∫–∞ [–∑–∞–∫—Ä—ã—Ç–∞—è](url)")).toBe(false);
    });

    it("–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å false –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞", () => {
      expect(hasMarkdownIssues("–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")).toBe(false);
      expect(hasMarkdownIssues("–¢–µ–∫—Å—Ç —Å —ç–º–æ–¥–∂–∏ üöÄ –∏ —á–∏—Å–ª–∞–º–∏ 123")).toBe(false);
    });
  });

  describe("escapeMarkdown", () => {
    it("–¥–æ–ª–∂–µ–Ω —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–≤–µ–∑–¥–æ—á–∫–∏", () => {
      expect(escapeMarkdown("–¢–µ–∫—Å—Ç —Å * –∑–≤–µ–∑–¥–æ—á–∫–æ–π")).toBe(
        "–¢–µ–∫—Å—Ç —Å \\* –∑–≤–µ–∑–¥–æ—á–∫–æ–π"
      );
    });

    it("–¥–æ–ª–∂–µ–Ω —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è", () => {
      expect(escapeMarkdown("–¢–µ–∫—Å—Ç —Å _ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º")).toBe(
        "–¢–µ–∫—Å—Ç —Å \\_ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º"
      );
    });

    it("–¥–æ–ª–∂–µ–Ω —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏", () => {
      expect(escapeMarkdown("–ö–æ–¥ —Å ` –∫–∞–≤—ã—á–∫–æ–π")).toBe("–ö–æ–¥ —Å \\` –∫–∞–≤—ã—á–∫–æ–π");
    });

    it("–¥–æ–ª–∂–µ–Ω —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏", () => {
      expect(escapeMarkdown("[–¢–µ–∫—Å—Ç] –≤ —Å–∫–æ–±–∫–∞—Ö")).toBe("\\[–¢–µ–∫—Å—Ç\\] –≤ —Å–∫–æ–±–∫–∞—Ö");
    });

    it("–¥–æ–ª–∂–µ–Ω —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏", () => {
      expect(escapeMarkdown("(–¢–µ–∫—Å—Ç) –≤ —Å–∫–æ–±–∫–∞—Ö")).toBe("\\(–¢–µ–∫—Å—Ç\\) –≤ —Å–∫–æ–±–∫–∞—Ö");
    });

    it("–¥–æ–ª–∂–µ–Ω —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ", () => {
      const input = "–¢–µ–∫—Å—Ç —Å *–∂–∏—Ä–Ω—ã–º*, _–∫—É—Ä—Å–∏–≤–æ–º_ –∏ `–∫–æ–¥–æ–º`";
      const expected = "–¢–µ–∫—Å—Ç —Å \\*–∂–∏—Ä–Ω—ã–º\\*, \\_–∫—É—Ä—Å–∏–≤–æ–º\\_ –∏ \\`–∫–æ–¥–æ–º\\`";
      expect(escapeMarkdown(input)).toBe(expected);
    });

    it("–Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω—è—Ç—å –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤", () => {
      const text = "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç";
      expect(escapeMarkdown(text)).toBe(text);
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∂–∏", () => {
      const text = "–¢–µ–∫—Å—Ç —Å —ç–º–æ–¥–∂–∏ üöÄ";
      expect(escapeMarkdown(text)).toBe(text);
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É", () => {
      expect(escapeMarkdown("")).toBe("");
    });
  });

  describe("splitLongMessage", () => {
    it("–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–¥–Ω—É —á–∞—Å—Ç—å –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", () => {
      const shortMessage = "–ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ";
      const result = splitLongMessage(shortMessage, 100);
      expect(result).toHaveLength(1);
      expect(result[0]).toBe(shortMessage);
    });

    it("–¥–æ–ª–∂–µ–Ω —Ä–∞–∑–¥–µ–ª—è—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏", () => {
      const longMessage = "a".repeat(5000); // –°–æ–∑–¥–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const result = splitLongMessage(longMessage, 1000);
      expect(result.length).toBeGreaterThan(1);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
      result.forEach((part) => {
        expect(part.length).toBeLessThanOrEqual(1000);
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —á–∞—Å—Ç–∏ –≤–º–µ—Å—Ç–µ –¥–∞—é—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const combined = result.join("");
      expect(combined).toBe(longMessage);
    });

    it("–¥–æ–ª–∂–µ–Ω —Ä–∞–∑–¥–µ–ª—è—Ç—å –ø–æ –∞–±–∑–∞—Ü–∞–º –∫–æ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ", () => {
      const message = "–ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü.\n\n–í—Ç–æ—Ä–æ–π –∞–±–∑–∞—Ü.\n\n–¢—Ä–µ—Ç–∏–π –∞–±–∑–∞—Ü.";
      const result = splitLongMessage(message, 20);

      // –î–æ–ª–∂–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç—å—Å—è –ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
      expect(result.length).toBeGreaterThan(1);
      expect(result[0]).toContain("–ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü.");
    });

    it("–¥–æ–ª–∂–µ–Ω —Ä–∞–∑–¥–µ–ª—è—Ç—å –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∫–æ–≥–¥–∞ –Ω–µ—Ç –∞–±–∑–∞—Ü–µ–≤", () => {
      const message =
        "–ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –í—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –¢—Ä–µ—Ç—å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.";
      const result = splitLongMessage(message, 25);

      expect(result.length).toBeGreaterThan(1);
      expect(result[0]).toContain("–ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.");
    });

    it("–¥–æ–ª–∂–µ–Ω —Ä–∞–∑–¥–µ–ª—è—Ç—å –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ", () => {
      const message = "—Å–ª–æ–≤–æ1 —Å–ª–æ–≤–æ2 —Å–ª–æ–≤–æ3 —Å–ª–æ–≤–æ4 —Å–ª–æ–≤–æ5 —Å–ª–æ–≤–æ6";
      const result = splitLongMessage(message, 15);

      expect(result.length).toBeGreaterThan(1);
      // –ù–µ –¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ–∑–∞—Ç—å –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ —Å–ª–æ–≤
      result.forEach((part) => {
        if (part.trim().includes(" ")) {
          expect(part.trim()).not.toMatch(/^\S*$/); // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
        }
      });
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É", () => {
      const result = splitLongMessage("", 100);
      expect(result).toHaveLength(1);
      expect(result[0]).toBe("");
    });

    it("–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è maxLength", () => {
      const shortMessage = "–¢–µ—Å—Ç";
      const result = splitLongMessage(shortMessage);
      expect(result).toHaveLength(1);
      expect(result[0]).toBe(shortMessage);
    });
  });
});
